#vim /opt/nginx/conf/nginx.conf
#systemctl reload tengine
#测试conf文件有否问题
#cd /opt/nginx
#./sbin/nginx -t 
#动态安装
#cd /usr/local/src/tengine-2.1.2
#./configure --prefix=/opt/nginx --user=www-data --group=www-data --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-openssl=/usr/local/src/openssl-1.0.1h --with-zlib=/usr/local/src/zlib-1.2.8 --with-pcre=/usr/local/src/pcre-8.38 --with-jemalloc=/usr/local/src/jemalloc-3.6.0 --with-http_concat_module=shared 
#make && make install

user root root;
worker_processes     auto;
worker_cpu_affinity  auto;
error_log /etc/nginx/error.log error;
#error_log /dev/null;
#pid /etc/nginx/nginx.pid;
#dso{
	#load ngx_http_concat_module.so;
#}
events{
	use epoll;
	worker_connections 65535;
}





# load modules compiled as Dynamic Shared Object (DSO)
#
#dso {
#    load ngx_http_fastcgi_module.so;
#    load ngx_http_rewrite_module.so;
#}

http {
	#server_tag IIS/6.0;#假装是IIS
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                 '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
	access_log off;
    error_log  off;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    tcp_nodelay on; 

    proxy_cache_path /usr/share/nginx/proxy_cache levels=1:2 keys_zone=content:20m inactive=1d max_size=100m;  
    #gzip  on;
    gzip on;
    gzip_min_length 1100;
    gzip_buffers 4 8k;
    gzip_types text/plain application/x-javascript text/css;
    output_buffers 1 32k;
    postpone_output 1460;

    client_max_body_size 50m;#上传文件大小限制 

	#IP白名单
	geo $whiteiplist  {
		 default 1;
		 127.0.0.1 0;
		 10.0.0.0/8 0;
		 121.207.242.0/24 0;
	 }

	# 这里取得原始用户的IP地址
	map $http_x_forwarded_for  $RealIp {
		""    $remote_addr;
		~^(?P<firstAddr>[0-9\.]+),?.*$    $firstAddr;
	}
	map $whiteiplist  $clientRealIp {
		 1 $RealIp;
		 0 "";
	}
 

	# 定义一个限制规则addr，根据用户真实IP地址$clientRealIp匹配，10m的链接池大小
	#limit_conn_zone $clientRealIp zone=addr:20m ;
	# 并发数量为1，超过则默认返回503，
	#limit_conn addr 100;
	#limit_conn_log_level notice;

	## 用户的 IP 地址 $binary_remote_addr 作为 Key，每个 IP 地址每秒处理 10 个请求
	## 你想用程序每秒几百次的刷我，没戏，再快了就不处理了，直接返回 503 错误给你
	#limit_req_zone $clientRealIp zone=req:20m  rate=100r/s;
	#limit_req_log_level notice;

 # 设定负载均衡后台服务器列表    
	upstream  net78{ 
        ip_hash; #互联网项目
        server   127.0.0.1:88 max_fails=2 fail_timeout=0 ;    
        #server   127.0.0.1:83 max_fails=2 fail_timeout=0 ;    
		keepalive 256;
    }

 

 

	server {
        listen       80;
        server_name  localhost;
 
		#配置1秒的缓存 大幅提升吞吐量
		proxy_cache content;
		proxy_cache_lock on;
		proxy_cache_valid 200 2s;
		proxy_cache_use_stale updating;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
	

        location =/ {
            root   /koatest/webmin;
            index  index.html;
        }
		  

		  location ~* .(ico|gif|bmp|jpg|jpeg|png|swf|js|css|mp3) {
            root    /koatest/webmin;
            expires 3m;
			
        }

		location / {
			root /koatest/webmin;
			expires 3m;
			index  index.html;
		}

		location ^~/Scripts {
			root    /koatest/webmin;    
			#concat on;
			#concat_max_files 20;
			expires 3m;
		}

		location ^~/Content {
			root    /koatest/webmin;    
			#concat on;
			#concat_max_files 20;
			expires 3m;
		}

		 
		location ^~/Api7822/ {
            #limit_req zone=req burst=5 nodelay;
			add_header Access-Control-Allow-Origin *;
			add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
			add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';

			proxy_set_header x-forwarded-for $clientRealIp;
			proxy_pass http://net78;
			proxy_redirect off;   
			proxy_http_version 1.1;
			proxy_set_header Connection "Keep-Alive";
			proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;        
		}
	 
		 
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        } 
         
	} 
	    
 

    
}
